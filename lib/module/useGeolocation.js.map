{"version":3,"sources":["useGeolocation.ts"],"names":["useEffect","useState","initialState","timeStamp","coords","accuracy","altitude","altitudeAccuracy","heading","latitude","longitude","speed","positionOptions","position","setPosition","navigator","geolocation","getCurrentPosition","success","failure","listener","watchPosition","clearWatch","data","err","console","log","setRNConfiguration","config","stopObserving"],"mappings":"iEAAA,OAAgBA,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CAEA,GAAMC,CAAAA,YAAY,CAAG,CACnBC,SAAS,CAAE,IADQ,CAEnBC,MAAM,CAAE,CACNC,QAAQ,CAAE,IADJ,CAENC,QAAQ,CAAE,IAFJ,CAGNC,gBAAgB,CAAE,IAHZ,CAINC,OAAO,CAAE,IAJH,CAKNC,QAAQ,CAAE,IALJ,CAMNC,SAAS,CAAE,IANL,CAONC,KAAK,CAAE,IAPD,CAFW,CAArB,CAaA,eAAe,UAA0B,IAAzBC,CAAAA,eAAyB,2DAAP,EAAO,eACPX,QAAQ,CAACC,YAAD,CADD,wCAChCW,QADgC,eACtBC,WADsB,eAGvCd,SAAS,CAAC,UAAM,CACde,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCC,OAAzC,CAAkDC,OAAlD,EACD,CAFQ,CAEN,EAFM,CAAT,CAIAnB,SAAS,CAAC,UAAM,CACd,GAAMoB,CAAAA,QAAQ,CAAGL,SAAS,CAACC,WAAV,CAAsBK,aAAtB,CACfH,OADe,CAEfC,OAFe,CAGfP,eAHe,CAAjB,CAMA,MAAO,kBAAMG,CAAAA,SAAS,CAACC,WAAV,CAAsBM,UAAtB,CAAiCF,QAAjC,CAAN,EAAP,CACD,CARQ,CAQN,EARM,CAAT,CAUA,QAASF,CAAAA,OAAT,CAAkBK,IAAlB,CAAwB,CACtBT,WAAW,CAACS,IAAD,CAAX,CACD,CAED,QAASJ,CAAAA,OAAT,CAAkBK,GAAlB,CAAuB,CACrBC,OAAO,CAACC,GAAR,CAAY,6BAAZ,CAA2CF,GAA3C,EACD,CAED,QAASG,CAAAA,kBAAT,CAA4BC,MAA5B,CAAoC,CAClCb,SAAS,CAACC,WAAV,CAAsBW,kBAAtB,CAAyCC,MAAzC,EACD,CAED,QAASC,CAAAA,aAAT,EAAyB,CACvBd,SAAS,CAACC,WAAV,CAAsBa,aAAtB,GACD,CAED,MAAO,CAAChB,QAAD,CAAWgB,aAAX,CAA0BF,kBAA1B,CAAP,CACD,CAlCD","sourcesContent":["import React, { useEffect, useState } from 'react'\r\n\r\nconst initialState = {\r\n  timeStamp: null,\r\n  coords: {\r\n    accuracy: null,\r\n    altitude: null,\r\n    altitudeAccuracy: null,\r\n    heading: null,\r\n    latitude: null,\r\n    longitude: null,\r\n    speed: null\r\n  }\r\n}\r\n\r\nexport default (positionOptions = {}) => {  \r\n  const [position, setPosition] = useState(initialState)\r\n\r\n  useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition(success, failure)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const listener = navigator.geolocation.watchPosition(\r\n      success,\r\n      failure,\r\n      positionOptions\r\n    )\r\n\r\n    return () => navigator.geolocation.clearWatch(listener);\r\n  }, [])\r\n\r\n  function success (data) {\r\n    setPosition(data)\r\n  }\r\n\r\n  function failure (err) {\r\n    console.log('error setting coordinates: ', err)\r\n  }\r\n\r\n  function setRNConfiguration(config) {\r\n    navigator.geolocation.setRNConfiguration(config)\r\n  }\r\n\r\n  function stopObserving() {\r\n    navigator.geolocation.stopObserving()\r\n  }\r\n\r\n  return [position, stopObserving, setRNConfiguration]\r\n};"]}